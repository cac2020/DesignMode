package mode.行为.备忘录;

/**
 * 每一步操作对应一个历史文档
 *
 * 读者可能会提出这样的疑问：既然要对元数据类（文档类Doc）的
 * 各个历史状态进行记录，为何不直接利用原型模式对元对象进行复
 * 制，而非要重新定义一个与之类似的备忘录类（历史快照类History）
 * 呢？其实这是出于对节省内存空间的考虑，譬如本例中历史快照类
 * History只是针对“文档内容”进行记录，而不包括“文档标题”，或
 * 者其他有更大数据量的状态，所以我们没有必要对整个元对象进行完
 * 整复制而造成不必要的内存空间资源的浪费。否则，我们完全可以考
 * 虑结合备忘录模式与原型模式来记录历史快照
 *
 * 无限制地对元对象进行快照备份的操作，都可能会导致内
 * 存空间资源的过度耗费，使系统性能变得越来越差。这时就要看读者
 * 怎样变通了，譬如为备忘录历史记录加上容量限制，可以总是保存最
 * 近的20条记录。
 *
 * 使用场景：备忘录模式适用于需要保存和恢复对象状态的场景，尤其是在需要支持撤销和重做操作时非常有用。
 */
public class History {
    private String body;//用于备忘文档内容

    public History(String body){
        this.body = body;
    }

    public String getBody() {
        return body;
    }
}
