package mode.行为.中介;

/**
 * 中介是在事物之间传播信息的中间媒介。中介模式（Mediator）
 * 为对象构架出一个互动平台，通过减少对象间的依赖程度以达到解耦
 * 的目的。我们的生活中有各种各样的媒介，如婚介所、房产中介、门
 * 户网站、电子商务、交换机组网、通信基站、即时通软件
 *
 * 对象之间交互 如果相互引用 你中有我 我中有你 会带来耦合  借助第三方将两者分开 中介的角色均发挥了使对象解耦的关键作用
 * 案例：聊天室、星形拓扑
 * 不管是对象引用维护还是消息的转发，都由处于中心节点的中介全权
 * 负责，最终架构出一套类似于星形拓扑的网络结构，极大地简化了各对象间多对多的复杂关联，最终解决了对象间过度耦合、频繁交互的问题
 *
 * 使用场景：
 * 1.系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解
 * 2.一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象
 * 3.需要通过一个中间类来封装多个类中的行为，但又不想生成太多的子类
 */
public class Client {
    public static void main(String[] args) {
        //聊天室实例化
        ChatRoom chatRoom = new ChatRoom("设计模式");
        //用户实例化
        User user3 = new User("张三");
        User user4 = new User("李四");
        User user5 = new User("王五");
        //张三、李四进入聊天室
        user3.login(chatRoom);
        user4.login(chatRoom);
        /*********输出*************
         系统消息：欢迎【张三】加入聊天室【设计模式】
         系统消息：欢迎【李四】加入聊天室【设计模式】
         ******************************/
        //开始交谈
        user3.talk("你好，四兄弟，就你一个在啊？");
        /*********输出*************
         【张三的对话框】张三 说： 你好，四兄弟，就你一个在啊？
         【李四的对话框】张三 说： 你好，四兄弟，就你一个在啊？
         ******************************/
        user4.talk("是啊，三哥。");
        /*********输出*************
         【张三的对话框】李四 说： 早啊，三哥。
         【李四的对话框】李四 说： 是啊，三哥。
         ******************************/
        //王五进入聊天室
        user5.login(chatRoom);
        /*********输出*************
         系统消息：欢迎【王五】加入聊天室【设计模式】
         ******************************/
        user3.talk("瞧，王老五来了。");
        /*********输出*************
         【张三的对话框】张三 说： 瞧，王老五来了。
         【李四的对话框】张三 说： 瞧，王老五来了。
         【王五的对话框】张三 说： 瞧，王老五来了。
         ******************************/
    }

}

