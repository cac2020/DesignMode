package mode.结构.亨元;

/**
 * 享元是共享元件的意思。享元模式的英文flyweight是轻量级的
 * 意思，这就意味着享元模式能使程序变得更加轻量化。当系统存在大
 * 量的对象，并且这些对象又具有相同的内部状态时，我们就可以用享
 * 元模式共享相同的元件对象，以避免对象泛滥造成资源浪费
 *
 * 思路上有点类似单例、原型模式，但是享元模式关注点不是创建对象，重点在于共享
 * 享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率
 * 使用场景：
 *      String常量池、数据库连接池、缓冲池，享元模式是池技术的重要实现方式
 *
 * 生活中案例：马赛克中基础色快、RPG地图中图件
 *
 */
public class Client {
    public static void main(String[] args) {
        //先实例化图件工厂
        TileFactory factory = new TileFactory();

        //随便绘制一列为例
        factory.getDrawable("河流").draw(10, 10);
        factory.getDrawable("河流").draw(10, 20);
        factory.getDrawable("道路").draw(10, 30);
        factory.getDrawable("草地").draw(10, 40);
        factory.getDrawable("草地").draw(10, 50);
        factory.getDrawable("草地").draw(10, 60);
        factory.getDrawable("草地").draw(10, 70);
        factory.getDrawable("草地").draw(10, 80);
        factory.getDrawable("道路").draw(10, 90);
        factory.getDrawable("道路").draw(10, 100);

        //绘制完地板后接着在顶层绘制房屋
        factory.getDrawable("房屋").draw(10, 10);
        factory.getDrawable("房屋").draw(10, 50);

/*运行结果
从磁盘加载[河流]图片，耗时半秒……在位置[10:10]上绘制图片：[河流]
在位置[10:20]上绘制图片：[河流]
从磁盘加载[道路]图片，耗时半秒……在位置[10:30]上绘制图片：[道路]
从磁盘加载[草地]图片，耗时半秒……在位置[10:40]上绘制图片：[草地]
在位置[10:50]上绘制图片：[草地]
在位置[10:60]上绘制图片：[草地]
在位置[10:70]上绘制图片：[草地]
在位置[10:80]上绘制图片：[草地]
在位置[10:90]上绘制图片：[道路]
在位置[10:100]上绘制图片：[道路]
从磁盘加载[房屋]图片，耗时半秒……将图层切换到顶层……在位置[10:10]上绘制图片：[房屋]
将图层切换到顶层……在位置[10:50]上绘制图片：[房屋]
*/
    }
}
